[{"title":"Scala变量","date":"2020-10-22T03:29:00.000Z","path":"2020/10/22/【Scala】变量/","text":"在 Scala 中，使用关键词 var 声明变量，使用关键词 val 声明常量 变量声明 12var VariableName : DataType [&#x3D; Initial Value]val VariableName : DataType [&#x3D; Initial Value] 123var city: String = &quot;北京&quot;val age: Int = 10println(city, age) 类型推断 当分配一个初始值给一个变量，Scala编译器可以计算出根据分配给它的值的变量类型。 123var city1 = &quot;北京&quot;val city2 = &quot;上海&quot;println(city1, city2) 多个变量声明12345var city1, city2 = &quot;北京&quot;println(city1, city2)val user1, user2 = &quot;张三&quot;println(user1, user2) 变量与常量12345678910111213141516171819202122232425// var变量var city = &quot;北京&quot;city = &quot;上海&quot;println(city)// val常量val user = &quot;张三&quot;// 不能重新赋值//user = &quot;李四&quot;println(user)// 有一种特殊场景，虽然不能重新对val变量userInfo赋值，但是可以修改里面的内容class UserInfo(var userName: String, var age: Int) &#123; override def toString: String = &#123; s&quot;$&#123;userName&#125;,$&#123;age&#125;&quot; &#125;&#125;val userInfo: UserInfo = new UserInfo(&quot;李四&quot;, 20)// 不能重新赋值//userInfo = new UserInfo(&quot;李四&quot;, 20)//修改内容userInfo.userName = &quot;张三&quot;userInfo.age = 10println(userInfo)","tags":[{"name":"变量","slug":"变量","permalink":"https://ceclar123.github.io/tags/%E5%8F%98%E9%87%8F/"}]},{"title":"Scala基础","date":"2020-10-22T02:29:00.000Z","path":"2020/10/22/【Scala】基础/","text":"Scala是一种纯面向对象的语言，每个值都是对象。基于JVM，兼容现有的Java程序。对于有Java基础的很容易掌握，同时有一些细节也需要特别关注。 注意事项 大小写敏感，与Java一样 类名，首字母大写，单词首字母大写，与Java一样 123class HelloWorld &#123; //&#125; 方法名称，首字母小写，单词首字母大写，与Java一样 12345class HelloWorld &#123; def sayHello(txt: String): Unit = &#123; println(s&quot;hello $&#123;txt&#125;&quot;) &#125;&#125; 文件名称，程序文件的名称应该与对象名称完全匹配(新版本不需要了) 标识符 用于对象，类，变量和方法的名称称为标识符。关键字不能用作标识符，标识符区分大小写。 字母数字标识符 以字母或下划线开始，之后可以跟字母、数字或下划线 $字符也被当作是字母，但被保留作为scala编译器产生的标识符之用。用户程序里的标识符不应该包含$字符，尽管能够编译通过，最好不要这样用 Scala遵循java的驼峰式标识符习惯，尽管下划线在标识符内是合法的，但最好不要这样用，因为在Scala中有其他用法。 运算符标识符 由一个或多个符号组成，例如： 1+ ++ ::: &lt; ?&gt; :-&gt; Scala编译器将在内部将操作符标识符转换成具有嵌入式$字符的合法Java标识符。例如，标识符:-&gt;将被内部表示为$colon$minus$greater 混合标识符 由字母数字组成，后面跟着下划线和一个操作符标识符 123val user_+ = &quot;张三&quot;val user_# = &quot;李四&quot;println(user_+, user_#) 字面识别符 文字标识符是用反引号`括起来的任意字符串，即使scala保留字，这个规则也有效 1234val `province` = &quot;四川&quot;val `object` = &quot;成都&quot;println(`province`, `object`)// 在 Scala 中 Thread. yield()非法的，因为 yield 是保留字。但是可以这样调用：Thread.`yield`() 注释 与Java类似，支持单行与多行注释，多行注释注意嵌套 12345678/*** 这里是多行注释* /*多行注意嵌套*/*/val hello = &quot;hello&quot;// 单行注释1// 单行注释2var world = &quot;world&quot; 换行符 Scala是面向行的语言，语句可以用分号（;）结束或换行符 语句末尾的分号通常是可选的。如果一行里仅 有一个语句可不写。如果一行里写多个语句那么分号是必需的 12val a = &quot;张三&quot;val b = &quot;张三&quot;; val c = &quot;李四&quot; 关键字 abstract case catch class def do else extends false final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try true type val var while with yield - : = =&gt; &lt;- &lt;: &lt;% &gt;: # @","tags":[{"name":"语法","slug":"语法","permalink":"https://ceclar123.github.io/tags/%E8%AF%AD%E6%B3%95/"},{"name":"基础","slug":"基础","permalink":"https://ceclar123.github.io/tags/%E5%9F%BA%E7%A1%80/"}]}]